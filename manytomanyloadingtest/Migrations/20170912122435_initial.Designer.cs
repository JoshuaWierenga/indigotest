// <auto-generated />
using manytomanyloadingtest.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace manytomanyloadingtest.Migrations
{
    [DbContext(typeof(MTMContext))]
    [Migration("20170912122435_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("manytomanyloadingtest.Models.Conversation", b =>
                {
                    b.Property<int>("ConversationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("GroupName");

                    b.Property<bool>("IsGroupChat");

                    b.HasKey("ConversationId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("manytomanyloadingtest.Models.Message", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ConversationId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<int?>("SenderUserId");

                    b.Property<string>("UserMessage");

                    b.HasKey("MessageID");

                    b.HasIndex("ConversationId");

                    b.HasIndex("SenderUserId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("manytomanyloadingtest.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PasswordHash");

                    b.Property<string>("Username");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("manytomanyloadingtest.Models.UserConversation", b =>
                {
                    b.Property<int>("UserConversationId");

                    b.Property<int>("UserId");

                    b.Property<int>("ConversationId");

                    b.Property<bool>("IsAdmin");

                    b.HasKey("UserConversationId", "UserId", "ConversationId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserConversations");
                });

            modelBuilder.Entity("manytomanyloadingtest.Models.Message", b =>
                {
                    b.HasOne("manytomanyloadingtest.Models.Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId");

                    b.HasOne("manytomanyloadingtest.Models.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderUserId");
                });

            modelBuilder.Entity("manytomanyloadingtest.Models.UserConversation", b =>
                {
                    b.HasOne("manytomanyloadingtest.Models.Conversation", "Conversation")
                        .WithMany("UserConversations")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("manytomanyloadingtest.Models.User", "User")
                        .WithMany("UserConversations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
